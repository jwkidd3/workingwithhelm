== Subcharts

Agenda:

* Create a chart within a chart
* Determine data for parents and children

=== Subcharts Definition

* Charts can have dependencies called subcharts
* They have their own values and templates

=== Subchart Details

* Subcharts are considered "stand-alone"
* Subchart can never 
** Explicitly depend on its parent chart
* Parent Chart can override values of subchart
* Helm has a concept of global values that can be accessed by all

=== Creating a subchart

* Change into a directory that is already a chart
* Create a subchart in that directory using `helm create mysubchart`
* Clean out templates if you desire to define your own

[source, sh, subs="attributes"]
----
% cd mychart/charts
% helm create mysubchart
% rm -rf mysubchart/templates/{star}.{star}
----

=== Adding Values And Template to Subchart

In the `subchart`, there is a _Values.yaml_ file where we can include:

[source, yaml, subs="attributes,quotes,verbatim"]
----
dessert: cake
----

=== Using `Values` from Subchart's own `values.yaml`

We can then create a ConfigMap template in _mychart/charts/mysubchart/templates/configmap.yaml_

[source, yaml, subs="attributes,quotes,verbatim"]
----
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-cfgmap2
data:
  dessert: {{ .Values.dessert }}
----

=== What it renders

Because the charts works as is, it becomes the following:

[source, yaml, subs="attributes,quotes,verbatim"]
----
# Source: mysubchart/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: newbie-elk-cfgmap2
data:
  dessert: cake
----

=== Overriding the defaults

* `mychart` is now the parent of `mysubchart`
* Since this relationship exists, we can specify configuration at `mychart` and pushed to `mysubchart`
* In other words _mychart/values.yaml_

[source, yaml, subs="attributes,quotes,verbatim"]
----
favorite:
  drink: coffee
  food: pizza
pizzaToppings:
  - mushrooms
  - cheese
  - peppers
  - onions

mysubchart:
  dessert: ice cream
----

NOTE: The last two lines will have information for the subchart

=== Rendering the Results

* Remember that our favorite dessert was `cake`
* The parent now has an override defined in `configmap.yaml`
* The following shows the results of the ConfigMap defined in `mysubchart`

[source, yaml, subs="attributes,quotes,verbatim"]
----
# Source: mychart/charts/mysubchart/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: unhinged-bee-cfgmap2
data:
  dessert: ice cream
----

=== Global Chart Values

* Global values are values that can be accessed from any chart or subchart by exactly the same name
* Globals require explicit declaration
* You canâ€™t use an existing non-global as if it were a global

=== Creating a Global Section in Values

* Both of the following should be able to access the value `global.salad` as {{ .Values.global.salad}}.
** _mychart/templates/configmap.yaml_ 
** _mychart/charts/mysubchart/templates/configmap.yaml_ 

[source, yaml, subs="attributes,quotes,verbatim"]
----
favorite:
  drink: coffee
  food: pizza
pizzaToppings:
  - mushrooms
  - cheese
  - peppers
  - onions

mysubchart:
  dessert: ice cream

global:
  salad: caesar
----

=== Configuring Parent Chart's Config Map

In _mychart/templates/configmap.yaml_, notice the `salad` value

[source, yaml, subs="attributes,quotes,verbatim"]
----
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-configmap
data:
  salad: {{ .Values.global.salad }}
----

=== Configuring Subcharts' Config Map

[source, yaml, subs="attributes,quotes,verbatim"]
----
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-cfgmap2
data:
  dessert: {{ .Values.dessert }}
  salad: {{ .Values.global.salad }}
----

=== The Parent Chart's Result

[source, yaml, subs="attributes,quotes,verbatim"]
----
# Source: mychart/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: silly-snake-configmap
data:
  salad: caesar
----

=== The Child Chart's Result

[source, yaml, subs="attributes,quotes,verbatim"]
----
apiVersion: v1
kind: ConfigMap
metadata:
  name: silly-snake-cfgmap2
data:
  dessert: ice cream
  salad: caesar
----

=== Sharing Templates with Subcharts

* All templates to include are stored by unique name
* Therefore they are possible to include in any chart or subchart
* Be sure to favor `include` over `template`


