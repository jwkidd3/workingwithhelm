== Lab 8: Deploying

*Step 0:* Uninstall the previous goweb-app application

=== Deploying to S3

For this lab, we will be using Minio which can mimic an S3 instance locally on your machine.

*Step 1:* Install minio on your Kubernetes instance

[source, sh, subs="attributes,quotes,verbatim"]
----
$ helm install --set accessKey=myaccesskey,secretKey=mysecretkey my-minio minio/minio
----

*Step 2:* Export the `POD_NAME` so that we may reference the name

[source, sh, subs="attributes,quotes,verbatim"]
----
$ export POD_NAME=$(kubectl get pods --namespace default -l "release=my-minio" -o jsonpath="{.items[0].metadata.name}")
----

*Step 3:* Port forward the pod so that we can have access to it

[source, sh, subs="attributes,quotes,verbatim"]
----
$ kubectl port-forward $POD_NAME 9000
----

*Step 4:* Log into `http://localhost:9000` and ensure that you can login with the accessKey, `myaccesskey`, and the secretKey, `mysecretkey`

*Step 5:* `export` the following to reroute traffic to your Minio instance.

[source, sh, subs="attributes,quotes,verbatim"]
----
$ export AWS_DISABLE_SSL=true
$ export AWS_DEFAULT_REGION=us-east-1
$ export AWS_ENDPOINT=localhost:9000
$ export AWS_ACCESS_KEY_ID=myaccesskey
$ export AWS_SECRET_ACCESS_KEY=mysecretkey
----

*Step 6:* Download the Minio command line utility

Information about `mc`, the Minio command line utility, can be found at their https://docs.min.io/docs/minio-client-quickstart-guide.html[website^]
if you have brew.

[source, sh, subs="attributes,quotes,verbatim"]
----
$ brew install minio/stable/mc
$ mc --help
----

*Step 7:* Create a bucket on S3

[source, sh, subs="attributes,quotes,verbatim"]
----
$ mc config host add helm-s3-minio http://localhost:9000 $AWS_ACCESS_KEY_ID $AWS_SECRET_ACCESS_KEY
$ mc mb helm-s3-minio/test-bucket
----

*Step 8:* Download the S3 plugin for Helm and verify that it is installed

[source, sh, subs="attributes,quotes,verbatim"]
----
$ helm plugin install https://github.com/hypnoglow/helm-s3.git
$ helm plugin list
----

*Step 9:* Initialize S3 from Helm

[source, sh, subs="attributes,quotes,verbatim"]
----
$ helm s3 init s3://test-bucket/charts
----

*Step 10:* Add your S3 Bucket as a Repository

[source, sh, subs="attributes,quotes,verbatim"]
----
$ helm repo add minio-local s3://test-bucket/charts
----

*Step 11:* Run `helm repo list` and verify that you have added your repository, `minio-local`

[source, sh, subs="attributes,quotes,verbatim"]
----
$ helm repo list
----

*Step 12:* In a terminal, in the _goweb-app_ directory, run `helm package` to create a `tar.gz` file of your chart

[source, sh, subs="attributes,quotes,verbatim"]
----
$ helm package .
----

*Step 13:* Push your package to S3

[source, sh, subs="attributes,quotes,verbatim"]
----
$ helm s3 push goweb-app-0.1.0.tgz minio-local
----

*Step 14:* Upgrade your application in Kubernetes using the minio-repository

[source, sh, subs="attributes,quotes,verbatim"]
----
$ helm install --generate-name minio-local/goweb-app
----

=== Deploying to Github

*Step 1:* In a terminal, in the _goweb-app_ directory, run `helm package` to create a `tar.gz` file of your chart, if you haven't already.

[source, sh, subs="attributes,quotes,verbatim"]
----
$ helm package .
----

*Step 2:* Create a github repository called _charts_

*Step 3:* Clone your repository to your local machine

*Step 4:* Copy the _goweb-app-0.1.0.tgz_ to your _charts_ directory

*Step 5:* Run the following to create a repo index

[source, sh, subs="attributes,quotes,verbatim"]
----
% helm repo index .
----

*Step 6:* Add, commit, and push the _index_ and your _tar.gz_

*Step 7:* Add your repository to your helm install, for example

[source, sh, subs="attributes,quotes,verbatim"]
----
% helm repo add my-github https://raw.githubusercontent.com/<username>/charts/master
----

*Step 7b:* This only applies to user who want to use *Github Enterprise*

. Use your internal github repository, for example
`https://raw.github.company.com/User_Or_OrgName/Branch_Or_Commit_ID/file_name.file_extension`. 
. You will need to generate a token at http://github.company.com/settings, then
.. Go to _Developer Settings_
.. Go to _Personal Access Tokens_
.. Click on _Generate New Token_
.. Enter a title (e.g. Helm) in the *Note:* text field
.. Select `public_repo`

*Step 8:* You can now search my-github as if it was any standard repository, feel free to experiment

[source, sh, subs="attributes,quotes,verbatim"]
----
$ helm search repo goweb-app
$ helm upgrade my-github/goweb-app
----

image::stop.png[width="20%, height="20%", align="center"]
