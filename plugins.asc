== Plugins

* A plugin is a tool that can be accessed through the helm CLI
* Not part of the built-in Helm
* Wide array of a https://v2.helm.sh/docs/related/#helm-plugins[list of plugins]
* Also available at https://github.com/search?q=topic%3Ahelm-plugin&type=Repositories[Github]

=== Plugin Overview

* Integrate with Helm CLI
* Provide a way to extend the core of Helm
* Without requiring every new feature to be written in Go

=== Plugin Features

* Can be added and removed from a Helm installation without impacting the core Helm tool
* Written in any programming language
* Will show up with `helm help`

=== Installing a Plugin

* You can pass in a path to a plugin, either
** Local file system 
** Url of a remote VCS repo
* Plugins get cloned in `$(helm home)/plugins`

[source, sh, subs="attributes,quotes,verbatim"]
----
% helm plugin install <path|url>
----

=== Installing via Tarball

* If you have a plugin tar distribution, simply untar the plugin into the $(helm home)/plugins directory.
* You can also install tarball plugins directly from url by issuing helm plugin install http://domain/path/to/plugin.tar.gz

=== Example Plugin: S3

* An Example Plugin is the S3 Plugin[https://github.com/hypnoglow/helm-s3]
* It can use AWS S3 as a chart repository

=== Creating the AWS Bucket

image::Create-bucket.png[]

=== Installing the S3 Plugin

[source, sh, subs="attributes,quotes,verbatim"]
----
% helm plugin install https://github.com/hypnoglow/helm-s3.git
----

=== Initializing the S3 Plugin

* We initialize the plugin using `S3 init`

[source, sh, subs="attributes,quotes,verbatim"]
----
% helm S3 init s3://my-helm-charts/charts
----

* After we can then introduce the URL as a repository


[source, sh, subs="attributes,quotes,verbatim"]
----
% helm repo add my-charts s3://my-helm-charts/charts
----

=== Display all the repos

[source, sh, subs="attributes,quotes,verbatim"]
----
% helm repo list
NAME            URL
stable          https://kubernetes-charts.storage.googleapis.com
local           http://127.0.0.1:8879/charts
my-charts       s3://my-helm-charts/charts
----

=== Creating a Simple Helm Chart

[source, sh, subs="attributes"]
----
% helm create test-chart
Creating test-chart
# Remove the initial cruft
$ rm -rf test-chart/templates/{star}.{star}
# Create a ConfigMap template at test-chart/templates/configmap.yaml
$ cat > test-chart/templates/configmap.yaml {lt}{lt} EOL
apiVersion: v1
kind: ConfigMap
metadata:
  name: test-chart-configmap
data:
  myvalue: "Hello World"
EOL
----

=== Install the Chart

[source, sh, subs="attributes,quotes,verbatim"]
----
% helm install ./test-chart
NAME:   zeroed-armadillo
LAST DEPLOYED: Fri Feb  9 17:10:38 2018
NAMESPACE: default
STATUS: DEPLOYED

RESOURCES:
==> v1/ConfigMap
NAME               DATA  AGE
test-chart-configmap  1     0s
----

=== Remove it again 

* Since we wanted to ensure that it works
* We can remove it from the K8S cluster

[source, sh, subs="attributes,quotes,verbatim"]
----
# --purge removes the release from the "store" completely
% helm delete --purge zeroed-armadillo
release "zeroed-armadillo" deleted
----

=== Upload the test chart

[source, sh, subs="attributes,quotes,verbatim"]
----
% helm package ./test-chart
Successfully packaged chart and saved it to: ~/test-chart-0.1.0.tgz
----

=== Once complete, send it to S3

* Specify the `tgz` file
* Specify the name of the repository
* Ensure that you version with SemVer2
* Ensure that you treat each release as immutable

[source, sh, subs="attributes,quotes,verbatim"]
----
% helm s3 push ./test-chart-0.1.0.tgz my-charts
----
