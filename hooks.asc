== Hooks

* Helm provides a hook mechanism to allow chart developers to intervene at certain points in a release’s life cycle.
** Load a `ConfigMap` or `Secret` during install before any other charts are loaded.
** Run a Job before deleting a release to gracefully take a service out of rotation before removing it.
** Hooks are regular templates, but they have special annotations that cause Helm to utilize them differently

[source, yaml, subs="attributes,quotes,verbatim"]
----
apiVersion: ...
kind: ....
metadata:
  annotations:
    "helm.sh/hook": "pre-install"
----

=== Available Hooks

[cols="1m,2"]
|===
| pre-install| Executes after templates are rendered, but before any resources are created in Kubernetes.
| post-install| Executes after all resources are loaded into Kubernetes
| pre-delete| Executes on a deletion request before any resources are deleted from Kubernetes.
| post-delete| Executes on a deletion request after all of the release’s resources have been deleted.
| pre-upgrade| Executes on an upgrade request after templates are rendered, but before any resources are loaded into Kubernetes (e.g. before a Kubernetes apply operation).
| post-upgrade| Executes on an upgrade after all resources have been upgraded.
| pre-rollback| Executes on a rollback request after templates are rendered, but before any resources have been rolled back.
| post-rollback| Executes on a rollback request after all resources have been modified.
| crd-install| Adds CRD resources before any other checks are run. This is used only on CRD definitions that are used by other manifests in the chart.
| test-success| Executes when running helm test and expects the pod to return successfully (return code == 0).
| test-failure| Executes when running helm test and expects the pod to fail (return code != 0).
|===

=== Hooks and Release Lifecycle

If the end user implements both hooks in `pre-install` and `post-install` in default lifecycle

. User runs `helm install foo`
. Chart is loaded into Tiller
. After some verification, Tiller renders the foo templates
. Tiller prepares to execute the pre-install hooks (loading hook resources into Kubernetes)
. Tiller sorts hooks by weight (assigning a weight of `0` by default) and by name for those hooks with the same weight in ascending order.
. Tiller then loads the hook with the lowest weight first (negative to positive)
. Tiller waits until the hook is “Ready” (except for CRDs)
. Tiller loads the resulting resources into Kubernetes. Note that if the `--wait flag is set`, Tiller will wait until all resources are in a ready state and will not run the post-install hook until they are ready.
. Tiller executes the `post-install` hook (loading hook resources)
. Tiller waits until the hook is “Ready”
. Tiller returns the release name (and other data) to the client
. The client exits

=== What is a resource?

* If the resource declared is a Kubernetes `Job` it will wait for the job to conclude
* Other resources will wait until it is `Ready` in Kubernetes

=== Hook resources are left alone

* Resources that a hook creates are not tracked or managed as part of the release
* Once Released it will be left alone
* In other words, you cannot rely on `helm delete` to delete the resources

=== Writing a hook

* Hooks are just Kubernetes manifest files with special annotations in the `metadata` section
* You can then use all the template features:
** `.Values`
** `.Release`
** `.Template`

[source, yaml, subs="attributes,quotes,verbatim"]
----
apiVersion: batch/v1
kind: Job
metadata:
  name: "{{.Release.Name}}"
  labels:
    app.kubernetes.io/managed-by: {{.Release.Service | quote }}
    app.kubernetes.io/instance: {{.Release.Name | quote }}
    app.kubernetes.io/version: {{ .Chart.AppVersion }}
    helm.sh/chart: "{{.Chart.Name}}-{{.Chart.Version}}"
  annotations:
    # This is what defines this resource as a hook. Without this line, the
    # job is considered part of the release.
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  template:
    metadata:
      name: "{{.Release.Name}}"
      labels:
        app.kubernetes.io/managed-by: {{.Release.Service | quote }}
        app.kubernetes.io/instance: {{.Release.Name | quote }}
        helm.sh/chart: "{{.Chart.Name}}-{{.Chart.Version}}"
    spec:
      restartPolicy: Never
      containers:
      - name: post-install-job
        image: "alpine:3.3"
        command: ["/bin/sleep","{{default "10" .Values.sleepyTime}}"]
----


=== Many to Many Relationships

* One Chart can implements multiple hooks:

[source, yaml, subs="attributes,quotes,verbatim"]
----
annotations:
  "helm.sh/hook": post-install,post-upgrade
----

* One Hook can be implemented by different Charts


=== Subcharts and Hooks

* When subcharts declare hooks, those are also evaluated
* There is no way for a top-level chart to disable the hooks declared by subcharts.

=== Weights

* It is possible to add a weight for execution order
* They can be positive or negative
* Tiller will sort hooks in ascending order

[source, yaml, subs="attributes,quotes,verbatim"]
----
annotations:
    "helm.sh/hook-weight": "5"
----

=== Hook Deletion Policies

* Possible to determine when to delete cooresponding hook resources
* You can choose with the following:
** `hook-succeeded` specifies Tiller should delete the hook after the hook is successfully executed.
** `hook-failed` specifies Tiller should delete the hook if the hook failed during execution.
** `before-hook-creation` specifies Tiller should delete the previous hook before the new hook is launched.

[source, yaml, subs="attributes,quotes,verbatim"]
----
annotations:
    "helm.sh/hook-delete-policy": hook-succeeded
----

=== Tiller Deletion Timeout

* Tiller will wait for 60 seconds for a deleted hook to no longer exist in the API server before timing out.
* This behavior can be changed using the `helm.sh/hook-delete-timeout` annotation. 
* The value is the number of seconds Tiller should wait for the hook to be fully deleted. 
* A value of `0` means Tiller does not wait at all.

=== Automatically Deleting Hooks from Previous Releases

* It is a possible that a hook from a previous release is installed
* You will get a "... already exists" error
* This is because it wasn't property deleted
* Use the hook annotation:

[source, yaml, subs="attributes,quotes,verbatim"]
----
helm.sh/hook-delete-policy": "before-hook-creation
----

* It is preferred to actually delete the hook after each use

[source, yaml, subs="attributes,quotes,verbatim"]
----
"helm.sh/hook-delete-policy": "hook-succeeded,hook-failed"
----


