== Chart Dependencies

Agenda:

* Adding Dependencies to your chart
* Use Tags and Conditions to select what is included

=== Establishing Chart Dependencies

_Chart.yaml_ is used to link one chart with another chart

[source, yaml, subs="attributes,quotes,verbatim"]
----
dependencies:
- name: apache
  version: 1.2.3
  repository: http://example.com/charts
- name: mysql
  version: 3.2.1
  repository: http://another.example.com/charts 
----

* The `name` field is the name of the chart you want.
* The `version` field is the version of the chart you want.
* The `repository` field is the full URL to the chart repository. 

NOTE: You must also use helm repo add to add that repo locally.

=== Downloading Dependencies

[source, sh, subs="attributes,quotes,verbatim"]
----
% helm dependency up my-chart
Hang tight while we grab the latest from your chart repositories...
...Successfully got an update from the "local" chart repository
...Successfully got an update from the "stable" chart repository
...Successfully got an update from the "example" chart repository
...Successfully got an update from the "another" chart repository
Update Complete.
Saving 2 charts
Downloading apache from repo http://example.com/charts
Downloading mysql from repo http://another.example.com/charts
----

=== How Dependencies are Stored

The tarballs will be installed in the _charts/_ directory

[source, sh, subs="attributes,quotes,verbatim"]
----
charts/
  apache-1.2.3.tgz
  mysql-3.2.1.tgz
----

=== Using `alias`

* Use `alias` in cases where they need to access a chart with other name
* The following is using the _same chart_ three different times

[source, yaml, subs="attributes,quotes,verbatim"]
----
dependencies:
- name: subchart
  repository: http://localhost:10191
  version: 0.1.0
  alias: new-subchart-1
- name: subchart
  repository: http://localhost:10191
  version: 0.1.0
  alias: new-subchart-2
- name: subchart
  repository: http://localhost:10191
  version: 0.1.0
----

=== `alias` Results

The previous slide creates:

[source, sh, subs="attributes,quotes,verbatim"]
----
subchart
new-subchart-1
new-subchart-2
----

=== Using Conditions

* The condition field holds one or more YAML paths (delimited by commas).
* If this path exists in the _parent’s values_ and resolves to a boolean value,
*  the chart will be enabled or disabled based on that boolean value. 
* Only the first valid path found in the list is evaluated and if no paths exist then the condition has no effect.
* For multiple level dependencies the condition is prepended by the path to the parent chart.

=== Using Tags

* The tags field is a YAML list of labels to associate with this chart.
* In the top parent’s values, all charts with tags can be enabled or disabled by specifying the tag and a boolean value.

=== Parent Chart

[source, yaml, subs="attributes,quotes,verbatim"]
----
# parentchart/requirements.yaml
dependencies:
  - name: subchart1
    repository: http://localhost:10191
    version: 0.1.0
    condition: subchart1.enabled
    tags:
      - front-end
      - subchart1

  - name: subchart2
    repository: http://localhost:10191
    version: 0.1.0
    condition: subchart2.enabled
    tags:
      - back-end
      - subchart2
----

=== Subchart 2 Requirements

[source, yaml, subs="attributes,quotes,verbatim"]
----
# subchart2/requirements.yaml
dependencies:
  - name: subsubchart
    repository: http://localhost:10191
    version: 0.1.0
    condition: subsubchart.enabled
----


=== Parent Chart Values

[source, yaml, subs="attributes,quotes,verbatim"]
----
subchart1:
  enabled: true
subchart2:
  subsubchart:
    enabled: false
tags:
  front-end: false
  back-end: true
----

* All charts with `front-end` would be disabled, but
* Conditions override tags, `subchart1` is enabled, therefore `subchart1` is enabled.


=== Tags & Conditions

* Conditions (when set in values) always override tags.
* The first condition path that exists wins and subsequent ones for that chart are ignored.
* Tags and conditions values must be set in the top parent’s _values.yaml_.


