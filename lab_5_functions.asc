== Lab 5: Functions

The Purpose of this lab is to give the understanding of existing functions in helm

Until now we have used the templating feature of the helm, but 
now we would like to know how we can have more programmatic control over the helm chart.

*Step 1:* Let's add some liveness and readiness probes to _goweb-app/templates/deployment.yaml_

[source, yaml, subs="attributes,quotes,verbatim"]
----
apiVersion: apps/v1
kind: Deployment
metadata:
  name: goweb-app
  labels:
    app.kubernetes.io/name: app
    app.kubernetes.io/instance: goweb-app
    app.kubernetes.io/version: "1.16.0"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: app
      app.kubernetes.io/instance: goweb-app
  template:
    metadata:
      labels:
        app.kubernetes.io/name: app
        app.kubernetes.io/instance: goweb-app
    spec:
      containers:
        - name: {{ .Values.containers.name }}
          image: "{{ .Values.containers.image }}:{{ .Values.containers.tag }}"
          imagePullPolicy: IfNotPresent
          ports:
          - name: http
            containerPort: 8080
            protocol: TCP
          env:
          - name: DB_URL
            value: "{{ .Release.Name }}-mysql"
          - name: DB_PORT
            value: "3306"
          - name: DB_USER
            value: "root"
          - name: DB_PASSWORD
            value: password
          - name: REDIS_HOST
            value: "{{ .Release.Name }}-redis-headless"
          - name: REDIS_PORT
            value: "6379"
{{- if .Values.containers.livenessProbe.enabled }}
          livenessProbe:
            tcpSocket:
              port: {{ int .Values.containers.livenessProbe.tcpSocket.port }}
            initialDelaySeconds: 60
            periodSeconds: 5
{{- end }}
{{- if .Values.containers.readinessProbe.enabled }}
          readinessProbe:
            tcpSocket:
              port: {{ int .Values.containers.readinessProbe.tcpSocket.port }}
            initialDelaySeconds: 60
            periodSeconds: 5
{{- end }}
----

*Step 2:* In the _values.yaml_ file, let us add the following content making it possible for our end users to customize their deployments

[source, yaml, subs="attributes,quotes,verbatim"]
----
mysql:
  mysqlDatabase: employeedb
  mysqlRootPassword: password
  persistence:
    enabled: false

redis:
  usePassword: false
  cluster:
    enabled: false
  master:
    persistence:
      enabled: false

containers:
  name: goweb-app
  image: opstreedevops/ot-go-webapp-master
  tag: "1.0-15"
  livenessProbe:
    enabled: true
    tcpSocket:
      port: 8080
  readinessProbe:
    enabled: true
    tcpSocket:
      port: 8080
----

*Step 3:* View the _deployment.yaml_ results

[source, sh, subs="attributes,quotes,verbatim"]
----
$ helm template ./goweb-app
----

*Step 4:* View the _deployment.yaml_ results when turning either `livenessProbe` or `readinessProbe` off.

[source, sh, subs="attributes,quotes,verbatim"]
----
$ helm template --set containers.livenessProbe.enabled=false ./goweb-app
----

[source, sh, subs="attributes,quotes,verbatim"]
----
$ helm template . --set containers.readinessProbe.enabled=false ./goweb-app
----

*Step 5:* We can also place segments of values into place, here we will do with so with the `readiness` and `liveness` values. Put the following in _goweb-app/templates/deployment.yaml_

[source, yaml, subs="attributes,quotes,verbatim"]
----
apiVersion: apps/v1
kind: Deployment
metadata:
  name: goweb-app
  labels:
    app.kubernetes.io/name: app
    app.kubernetes.io/instance: goweb-app
    app.kubernetes.io/version: "1.16.0"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: app
      app.kubernetes.io/instance: goweb-app
  template:
    metadata:
      labels:
        app.kubernetes.io/name: app
        app.kubernetes.io/instance: goweb-app
    spec:
      containers:
        - name: {{ .Values.containers.name }}
          image: "{{ .Values.containers.image }}:{{ .Values.containers.tag }}"
          imagePullPolicy: IfNotPresent
          ports:
          - name: http
            containerPort: 8080
            protocol: TCP
          env:
          - name: DB_URL
            value: "{{ .Release.Name }}-mysql"
          - name: DB_PORT
            value: "3306"
          - name: DB_USER
            value: "root"
          - name: DB_PASSWORD
            value: password
          - name: REDIS_HOST
            value: "{{ .Release.Name }}-redis-headless"
          - name: REDIS_PORT
            value: "6379"
{{- if .Values.containers.livenessProbe }}
          livenessProbe:
      {{- with .Values.containers.livenessProbe }}
        {{- toYaml . | nindent 12 }}
      {{- end }}
{{- end }}
{{- if .Values.containers.readinessProbe }}
          readinessProbe:
      {{- with .Values.containers.readinessProbe }}
        {{- toYaml . | nindent 12 }}
      {{- end }}
{{- end }}
----


*Step 6:* We can change the _values.yaml_ where we will have the `initalDelay`, `periodSeconds` in here as well so our end users can manage the specific values.

[source, yaml, subs="attributes,quotes,verbatim"]
----
mysql:
  mysqlDatabase: employeedb
  mysqlRootPassword: password
  persistence:
    enabled: false

redis:
  usePassword: false
  cluster:
    enabled: false
  master:
    persistence:
      enabled: false

containers:
  name: goweb-app
  image: opstreedevops/ot-go-webapp-master
  tag: "1.0-15"
  livenessProbe:
    tcpSocket:
      port: 8080
    initialDelaySeconds: 60
    periodSeconds: 5
  readinessProbe:
    tcpSocket:
      port: 8080
    initialDelaySeconds: 50
    periodSeconds: 5
----

*Step 7:* Use `helm template` to see what the changes look like

[source, sh, subs="attributes,quotes,verbatim"]
----
$ helm template ./goweb-app
----

*Step 8:* Next, we can use some of the functions from _goweb-app/_helpers.tpl_ in _goweb-app/templates/service.yaml_ with the following:

[source, yaml, subs="attributes,quotes,verbatim"]
----
apiVersion: v1
kind: Service
metadata:
  name: {{ include "goweb-app.fullname" . }}
  labels:
    {{- include "goweb-app.labels" . | nindent 4 }}
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: http
      protocol: TCP
      name: http
  selector:
    {{- include "goweb-app.selectorLabels" . | nindent 4 }}
----

*Step 9:* Use some of the functions from _goweb-app/_helpers.tpl_ in  _goweb-app/templates/ingress.yaml_ with the following:

[source, yaml, subs="attributes,quotes,verbatim"]
----
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: {{ include "goweb-app.fullname" . }}
  labels:
    {{- include "goweb-app.labels" . | nindent 4 }}
spec:
  rules:
    - http:
        paths:
          - path: /
            backend:
              serviceName: {{ include "goweb-app.fullname" . }}
              servicePort: 8080
----

*Step 10:* Use some of the functions from _goweb-app/_helpers.tpl_ in  _goweb-app/templates/deployment.yaml_ with the following:

[source, yaml, subs="attributes,quotes,verbatim"]
----
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "goweb-app.fullname" . }}
  labels:
    {{- include "goweb-app.labels" . | nindent 4 }}
spec:
  replicas: 1
  selector:
    matchLabels:
      {{- include "goweb-app.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "goweb-app.selectorLabels" . | nindent 8 }}
    spec:
      containers:
        - name: {{ .Values.containers.name }}
          image: "{{ .Values.containers.image }}:{{ .Values.containers.tag }}"
          imagePullPolicy: IfNotPresent
          ports:
          - name: http
            containerPort: 8080
            protocol: TCP
          env:
          - name: DB_URL
            value: "{{ .Release.Name }}-mysql"
          - name: DB_PORT
            value: "3306"
          - name: DB_USER
            value: "root"
          - name: DB_PASSWORD
            value: password
          - name: REDIS_HOST
            value: "{{ .Release.Name }}-redis-headless"
          - name: REDIS_PORT
            value: "6379"
{{- if .Values.containers.livenessProbe }}
          livenessProbe:
      {{- with .Values.containers.livenessProbe }}
        {{- toYaml . | nindent 12 }}
      {{- end }}
{{- end }}
{{- if .Values.containers.readinessProbe }}
          readinessProbe:
      {{- with .Values.containers.readinessProbe }}
        {{- toYaml . | nindent 12 }}
      {{- end }}
{{- end }}
----

*Step 11:* Perform any other templating that you feel is needed, if you make a mistake `helm rollback <release-name>` can send you back to a previous state.

*Step 12:* Run `helm lint` or `helm template` to ensure it works as desired

*Step 13:* Run `helm upgrade` with the previous release name when ready for new deployment
