== Functions

* Allows us to transform the values
* Works much like functional programming
* Functions work with the syntax: `functionName arg1 arg2...`

=== `quote`

Places a quote (`"`) around the food when evaluated

[source, yaml, subs="attributes,quotes,verbatim"]
----
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-configmap
data:
  myvalue: "Hello World"
  drink: {{ .Values.favorite.drink | quote }}
  food: {{ .Values.favorite.food | quote }}
----

=== Rendering `quote`

[source, yaml, subs="attributes,quotes,verbatim"]
----
# Source: mychart/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: trendsetting-p-configmap
data:
  myvalue: "Hello World"
  drink: "coffee"
  food: "PIZZA"
----

=== Over 60 Functions Available

Functions are available:

* https://godoc.org/text/template[Go Template Library]
* http://masterminds.github.io/sprig/[Sprig template library]

=== Pipelines

* Analogous to Pipeline in UNIX shell scripting
* Each function is applied to the tail to perform actions
* The following is equivalent to the previous slide

[source, yaml, subs="attributes,quotes,verbatim"]
----
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-configmap
data:
  myvalue: "Hello World"
  drink: {{ .Values.favorite.drink | quote }}
  food: {{ .Values.favorite.food | quote }}
----

=== Chaining Multiple Pipelines

The following will convert `favorite.food` to upper case and then add a quote

[source, yaml, subs="attributes,quotes,verbatim"]
----
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-configmap
data:
  myvalue: "Hello World"
  drink: {{ .Values.favorite.drink | quote }}
  food: {{ .Values.favorite.food | upper | quote }}
----

=== Rendering `quote` and `upper`

Here is the result:

[source, yaml, subs="attributes,quotes,verbatim"]
----
# Source: mychart/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: trendsetting-p-configmap
data:
  myvalue: "Hello World"
  drink: "coffee"
  food: "PIZZA"
----

=== Ordering does Matter

Getting the order down is important, determine the following:

[source, yaml, subs="attributes,quotes,verbatim"]
----
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-configmap
data:
  myvalue: "Hello World"
  drink: {{ .Values.favorite.drink | repeat 5 | quote }}
  food: {{ .Values.favorite.food | upper | quote }}
----

=== Answer: Ordering does Matter

[source, yaml, subs="attributes,quotes,verbatim"]
----
# Source: mychart/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: melting-porcup-configmap
data:
  myvalue: "Hello World"
  drink: "coffeecoffeecoffeecoffeecoffee"
  food: "PIZZA"
----

=== `default` function

* The default function is: `default DEFAULT_VALUE GIVEN_VALUE`
* Running it will provide us with the following:
* Although works with static values, works well with functions

[source, yaml, subs="attributes,quotes,verbatim"]
----
drink: {{ .Values.favorite.drink | default "tea" | quote }}
----

[source, yaml, subs="attributes,quotes,verbatim"]
----
# Source: mychart/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: virtuous-mink-configmap
data:
  myvalue: "Hello World"
  drink: "coffee"
  food: "PIZZA"
----

=== Removing `coffee`

[source, yaml, subs="attributes,quotes,verbatim"]
----
# Source: mychart/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: fair-worm-configmap
data:
  myvalue: "Hello World"
  drink: "tea"
  food: "PIZZA"
----

=== Operators

* Operators that return a boolean value. To use `eq`, `ne`, `lt`, `gt`, `and`, `or`, `not`
* To chain operators, separate by surrounding them with parenthesis

.`and` and `eq`
[source, yaml, subs="attributes,quotes,verbatim"]
----
(and .Values.fooString (eq .Values.fooString "foo"))
----

.`or` and `not`
[source, yaml, subs="attributes,quotes,verbatim"]
----
(or .Values.anUnsetVariable (not .Values.aSetVariable))
----

=== Flow Control

We will cover basic flow control:

* `if`/`else` for creating conditional blocks
* `with` to specify a scope
* `range`, which provides a “for each”-style loop

And wade our way into templates

* `define` declares a new named template inside of your template
* `template` imports a named template
* `block` declares a special kind of fillable template area

=== `if`/`else`

[source, yaml, subs="attributes,quotes,verbatim"]
----
{{ if PIPELINE }}
  # Do something
{{ else if OTHER PIPELINE }}
  # Do something else
{{ else }}
  # Default case
{{ end }}
----

=== "Falsy" values

A pipeline is `false` if a value is:

* a `boolean` false
* a numeric zero
* an empty string
* a `nil` (empty or null)
* an empty collection (`map`, `slice`, `tuple`, `dict`, `array`)

=== `if`/`else` Example

* The following checks for an absence of a value
* The determines the equality using `eq`
* If so, the create `mug:true`

[source, yaml, subs="attributes,quotes,verbatim"]
----
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-configmap
data:
  myvalue: "Hello World"
  drink: {{ .Values.favorite.drink | default "tea" | quote }}
  food: {{ .Values.favorite.food | upper | quote }}
  {{ if and .Values.favorite.drink (eq .Values.favorite.drink "coffee") }}mug: true{{ end }}
----

=== Controlling Whitespace

* The following creates an `error converting YAML to JSON` error due to indentation
* `mug:true` is indented too far right, and is an isolated key

[source, yaml, subs="attributes,quotes,verbatim"]
----
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-configmap
data:
  myvalue: "Hello World"
  drink: {{ .Values.favorite.drink | default "tea" | quote }}
  food: {{ .Values.favorite.food | upper | quote }}
  {{if eq .Values.favorite.drink "coffee"}}
    mug: true
  {{end}}
----

=== Rendering the Extra Space

[source, yaml, subs="attributes,quotes,verbatim"]
----
data:
  myvalue: "Hello World"
  drink: "coffee"
  food: "PIZZA"
    mug: true
----

=== Attempt to Fix Space Error

As an attempt we could flush the `mug:true` up to the `if`

[source, yaml, subs="attributes,quotes,verbatim"]
----
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-configmap
data:
  myvalue: "Hello World"
  drink: {{ .Values.favorite.drink | default "tea" | quote }}
  food: {{ .Values.favorite.food | upper | quote }}
  {{if eq .Values.favorite.drink "coffee"}}
  mug: true
  {{end}}
----

=== What that renders

We get an extra carriage return, where the `{{if}}` would be

[source, yaml, subs="attributes,quotes,verbatim"]
----
data:
  myvalue: "Hello World"
  drink: "coffee"
  food: "PIZZA"

  mug: true
----


=== Using special curly-braced syntax

* `{{-` (with the dash and space added) indicates that whitespace should be chomped left
* `-}}` means whitespace to the right should be consumed. 
* Be careful! Newlines are whitespace!

[source, yaml, subs="attributes,quotes,verbatim"]
----
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-configmap
data:
  myvalue: "Hello World"
  drink: {{ .Values.favorite.drink | default "tea" | quote }}
  food: {{ .Values.favorite.food | upper | quote }}
  {{- if eq .Values.favorite.drink "coffee"}}
  mug: true
  {{- end}}
----

=== Reminder: `indent` function

You can apply the same technique with the `indent` function

[source, yaml, subs="attributes,quotes,verbatim"]
----
{{indent 2 "mug:true"}}
----

=== Modifying with `with`

* `with` is like a mixin in languages like Ruby
* Provides a way to set a scope from a value, like `.Values.favorites`
* May seem similar to `import static` in Java

[source, yaml, subs="attributes,quotes,verbatim"]
----
{{ with PIPELINE }}
  # restricted scope
{{ end }}
----

=== Using `with`

Using `with`, we can reference `.drink`, `.food`

[source, yaml, subs="attributes,quotes,verbatim"]
----
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-configmap
data:
  myvalue: "Hello World"
  {{- with .Values.favorite }}
  drink: {{ .drink | default "tea" | quote }}
  food: {{ .food | upper | quote }}
  {{- end }}
----


=== Exiting the `with` Appropriately

* `Release.Name` is not in `.Values.favorite`
* This will return an error

[source, yaml, subs="attributes,quotes,verbatim"]
----
{{- with .Values.favorite }}
drink: {{ .drink | default "tea" | quote }}
food: {{ .food | upper | quote }}
release: {{ .Release.Name }}
{{- end }}
----

=== Correcting the `with` error

[source, yaml, subs="attributes,quotes,verbatim"]
----
{{- with .Values.favorite }}
drink: {{ .drink | default "tea" | quote }}
food: {{ .food | upper | quote }}
{{- end }}
release: {{ .Release.Name }}
----

=== Looping with `Range`

Given the following, we would like to "iterate" all the pizza toppings

[source, yaml, subs="attributes,quotes,verbatim"]
----
favorite:
  drink: coffee
  food: pizza
pizzaToppings:
  - mushrooms
  - cheese
  - peppers
  - onions
----

=== Using `Range`

* `range` will iterate over the `pizzaToppings`
* `.` will represent each value
* `{{ . | title | quote }}` will send each value into `title` case and then `quote`

[source, yaml, subs="attributes,quotes,verbatim"]
----
toppings: |-
    {{- range .Values.pizzaToppings }}
    - {{ . | title | quote }}
    {{- end }}
----

=== Result of using `Range`

[source, yaml, subs="attributes,quotes,verbatim"]
----
toppings: |-
  - "Mushrooms"
  - "Cheese"
  - "Peppers"
  - "Onions"
----

WARNING: Notice `|-` is a YAML Multiline String

=== Variables

* Temporary Variables are available
* Using a previous example that failed because `.Release.Name` is not in `.Values.favorite`
* A workaround is to introduce a variable

[source, yaml, subs="attributes,quotes,verbatim"]
----
{{- with .Values.favorite }}
drink: {{ .drink | default "tea" | quote }}
food: {{ .food | upper | quote }}
release: {{ .Release.Name }}
{{- end }}
----


=== Using `Variables`

* Uses the form `$name`
* Assigned using a special operator: `:=`
* Notice the variable is bound _before_ the `with` block

[source, yaml, subs="attributes,quotes,verbatim"]
----
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-configmap
data:
  myvalue: "Hello World"
  {{- $relname := .Release.Name -}}
  {{- with .Values.favorite }}
  drink: {{ .drink | default "tea" | quote }}
  food: {{ .food | upper | quote }}
  release: {{ $relname }}
  {{- end }}
----

=== After Running the Example

[source, yaml, subs="attributes,quotes,verbatim"]
----
# Source: mychart/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: viable-badger-configmap
data:
  myvalue: "Hello World"
  drink: "coffee"
  food: "PIZZA"
  release: viable-badger
----

=== Using Variables with `range`

* Variables can be used as an index and value variable for lists
* Below, `index` and `topping` are used to display element number, `:`, and the element

[source, yaml, subs="attributes,quotes,verbatim"]
----
toppings: |-
    {{- range $index, $topping := .Values.pizzaToppings }}
      {{ $index }}: {{ $topping }}
    {{- end }}
----

=== Using `range` for Key Value Pairs

* Since `./Values.favorite` are a list of key value pairs, we can iterate
* $key will be `drink`, $val will be `coffee`, etc.

[source, yaml, subs="attributes,quotes,verbatim"]
----
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-configmap
data:
  myvalue: "Hello World"
  {{- range $key, $val := .Values.favorite }}
  {{ $key }}: {{ $val | quote }}
  {{- end}}
----

=== Result of using `range` for Key Value Pairs

[source, yaml, subs="attributes,quotes,verbatim"]
----
# Source: mychart/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: eager-rabbit-configmap
data:
  myvalue: "Hello World"
  drink: "coffee"
  food: "pizza"
----

=== Global Variables

* `$` represents the global variable
* This is useful in a `range` loop you need a value by navigating from the top

[source, yaml, subs="attributes,quotes,verbatim"]
----
{{- range .Values.tlsSecrets }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ .name }}
  labels:
    # Many helm templates would use `.` below, but that will not work,
    # however `$` will work here
    app.kubernetes.io/name: {{ template "fullname" $ }}
    # I cannot reference .Chart.Name, but I can do $.Chart.Name
    helm.sh/chart: "{{ $.Chart.Name }}-{{ $.Chart.Version }}"
    app.kubernetes.io/instance: "{{ $.Release.Name }}"
    # Value from appVersion in Chart.yaml
    app.kubernetes.io/version: "{{ $.Chart.AppVersion }}"
    app.kubernetes.io/managed-by: "{{ $.Release.Service }}"
type: kubernetes.io/tls
data:
  tls.crt: {{ .certificate }}
  tls.key: {{ .key }}
---
{{- end }}
----


=== Named Templates

* A named template (sometimes called a partial or a subtemplate) 
* A template defined inside of a file, and given a name
* Declare and manage `define`, `template`, `include` and `block`

=== Partials and `_` Files

* We can create named embedded templates, that can be accessed by name elsewhere
* Some Conventions:
** Most files in _templates/_ are treated as if they contain Kubernetes manifests
** The _NOTES.txt_ is one exception
** Files whose name begins with an underscore (`_`) are assumed to not have a manifest inside.

=== Declaring a Template

The define action allows us to create a named template inside of a template file. 

[source, yaml, subs="attributes,quotes,verbatim"]
----
{{ define "MY.NAME" }}
  # body of template here
{{ end }}
----

=== Example of a Template

[source, yaml, subs="attributes,quotes,verbatim"]
----
{{- define "mychart.labels" }}
  labels:
    generator: helm
    date: {{ now | htmlDate }}
{{- end }}
----

=== Embedding a Template

[source, yaml, subs="attributes,quotes,verbatim"]
----
{{- define "mychart.labels" }}
  labels:
    generator: helm
    date: {{ now | htmlDate }}
{{- end }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-configmap
  {{- template "mychart.labels" }}
data:
  myvalue: "Hello World"
  {{- range $key, $val := .Values.favorite }}
  {{ $key }}: {{ $val | quote }}
  {{- end }}
----

=== Template names are global

* Template names are global. 
* If you declare two templates with the same name, whichever one is loaded last will be the one used.
* Convention is to prefix each defined template with name of the chart
* Using the specific chart name as a prefix we can avoid any conflicts that may arise due to two different charts that implement templates of the same name.

[source, yaml, subs="attributes,quotes,verbatim"]
----
{{ define "mychart.labels" }}
----

=== Setting scope of a template

The following will add `Chart` `Name` and `Version` albeit incorrectly

[source, yaml, subs="attributes,quotes,verbatim"]
----
{{/* Generate basic labels */}}
{{- define "mychart.labels" }}
  labels:
    generator: helm
    date: {{ now | htmlDate }}
    chart: {{ .Chart.Name }}
    version: {{ .Chart.Version }}
{{- end }}
----

=== What it Renders

* Notice that `chart` and `version` are missing
* They were not in the scope

[source, yaml, subs="attributes,quotes,verbatim"]
----
apiVersion: v1
kind: ConfigMap
metadata:
  name: moldy-jaguar-configmap
  labels:
    generator: helm
    date: 2016-11-02
    chart:
    version:
----

=== Passing in the Scope

Instead of:

[source, yaml, subs="attributes,quotes,verbatim"]
----
{{ define "mychart.labels" }}
----

We will include `.`:

[source, yaml, subs="attributes,quotes,verbatim"]
----
{{ define "mychart.labels" . }}
----

=== Resulting in the following

[source, yaml, subs="attributes,quotes,verbatim"]
----
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-configmap
  {{- template "mychart.labels" .}}
data:
  myvalue: "Hello World"
  {{- range $key, $val := .Values.favorite }}
  {{ $key }}: {{ $val | quote }}
  {{- end }}
----

=== `include` function

If provided the following:

[source, yaml, subs="attributes,quotes,verbatim"]
----
{{- define "mychart.app" -}}
app_name: {{ .Chart.Name }}
app_version: "{{ .Chart.Version }}+{{ .Release.Time.Seconds }}"
{{- end -}}
----

=== Calling `template`

* Substituting it into template using `template`
* Notice the location of the `template`

[source, yaml, subs="attributes,quotes,verbatim"]
----
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-configmap
  labels:
    {{ template "mychart.app" .}}
data:
  myvalue: "Hello World"
  {{- range $key, $val := .Values.favorite }}
  {{ $key }}: {{ $val | quote }}
  {{- end }}
{{ template "mychart.app" . }}
----

=== The Incorrect Output

* Notice the location of `app_name` and `app_version` in both `labels` and `data`
* `template` will organize in it's own text alignment
* `template` is an _action_, not a function

[source, yaml, subs="attributes,quotes,verbatim"]
----
# Source: mychart/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: measly-whippet-configmap
  labels:
    app_name: mychart
app_version: "0.1.0+1478129847"
data:
  myvalue: "Hello World"
  drink: "coffee"
  food: "pizza"
app_name: mychart
app_version: "0.1.0+1478129847"
----

=== `include` is a Function

* `include` is a function, instead of an action
* Since it is a function, it is available to be chained to other functions

[source, yaml, subs="attributes,quotes,verbatim"]
----
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-configmap
  labels:
    {{- include "mychart.app" . | nindent 4 }}
data:
  myvalue: "Hello World"
  {{- range $key, $val := .Values.favorite }}
  {{ $key }}: {{ $val | quote }}
  {{- end }}
  {{- include "mychart.app" . | nindent 2 }}
----

=== What it renders

[source, yaml, subs="attributes,quotes,verbatim"]
----
# Source: mychart/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: edgy-mole-configmap
  labels:
    app_name: mychart
    app_version: "0.1.0+1478129987"
data:
  myvalue: "Hello World"
  drink: "coffee"
  food: "pizza"
  app_name: mychart
  app_version: "0.1.0+1478129987"
----

NOTE: Prefer `include` over `template`

=== Accessing Files

* You can also bring in files into Helm
* Files must be less than 1M
* Files in _template/_ directory cannot be accessed
* Files excluded in _.helmignore_ cannot be accessed

=== Creating Standard Files

.config1.txt
[source, subs="attributes,quotes,verbatim"]
----
message = "Hello from config 1"
----

.config2.txt:

[source, subs="attributes,quotes,verbatim"]
----
message = "This is config 2"
----

.config3.txt
----
message = "Goodbye from config 3"
----

=== Using `range` to include the Files

Here, we will use a `range list` to get all the values in range and print them

[source, yaml, subs="attributes,quotes,verbatim"]
----
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-configmap
data:
  {{- $files := .Files }}
  {{- range list "config1.txt" "config2.txt" "config3.txt" }}
  {{ . }}: |-
    {{ $files.Get . }}
  {{- end }}
----

=== Results of `Files` and `range`

[source, yaml, subs="attributes,quotes,verbatim"]
----
# Source: mychart/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: quieting-giraf-configmap
data:
  config1.txt: |-
    message = "Hello from config 1"

  config2.txt: |-
    message = "This is config 2"

  config3.txt: |-
    message = "Goodbye from config 3"
----

=== Path Helpers

* Helm imports many of the functions from Go's https://golang.org/pkg/path/[`path`]
* They use the same names, but instead of capital letters it uses small letters
* `Base` -> `base`

Imported Functions

* Base
* Dir
* Ext
* IsAbs
* Clean

=== Glob Patterns

* `Glob` 
** Allows you to filter files in glob patterns
** Returns a `Files` type, so you may call any of the `Files` methods on the returned object


=== Given the files

[source, yaml, subs="attributes,quotes,verbatim"]
----
foo/:
  foo.txt foo.yaml

bar/:
  bar.go bar.conf baz.yaml
----


=== Using `Glob`:

* Notice the `$path` and `$byte` are included with `Glob`
* We can enrich the content of `$path` and `$byte` with Go functions

[source, yaml, subs="attributes,quotes,verbatim"]
----
{{ $root := . }}
{{ range $path, $bytes := .Files.Glob "foo/*" }}
{{ base $path }}: '{{ $root.Files.Get $path | b64enc }}'
{{ end }}
----

=== Configmap and Secrets Utility

* Helps with configmaps and secrets
* Helm Provides some utilities
* Useful to use these methods in conjunction with the `Glob` method.

[source, yaml, subs="attributes"]
----
apiVersion: v1
kind: ConfigMap
metadata:
  name: conf
data:
  {{- (.Files.Glob "foo/{star}").AsConfig | nindent 2 }}
---
apiVersion: v1
kind: Secret
metadata:
  name: very-secret
type: Opaque
data:
  {{- (.Files.Glob "bar/{star}").AsSecrets | nindent 2 }}
----

=== Encoding

You can apply Base64 encoding using `b64enc`

[source, yaml, subs="attributes,quotes,verbatim"]
----
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Release.Name }}-secret
type: Opaque
data:
  token: |-
    {{ .Files.Get "config1.toml" | b64enc }}
----

=== Lines

To iterate each line in a template, you can use `.Files.Lines`

[source, yaml, subs="attributes,quotes,verbatim"]
----
data:
  some-file.txt: {{ range .Files.Lines "foo/bar.txt" }}
    {{ . }}{{ end }}
----

=== NOTES.txt

* Provides help to end users
* Is in plain text
* Has template functions available

[source, yaml, subs="attributes,quotes,verbatim"]
----
Thank you for installing {{ .Chart.Name }}.

Your release is named {{ .Release.Name }}.

To learn more about the release, try:

  $ helm status {{ .Release.Name }}
  $ helm get {{ .Release.Name }}
----

