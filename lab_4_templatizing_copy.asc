== Lab 4: Templatizing

The Purpose of this lab is to give an understanding of templating in Helm.

Until now, the _goweb-app_ helm chart was completely hardcoded or static. 
In this lab, we will be making it dynamic when creating the release of 
the helm chart where the end-user can change the behavior of the workload in terms of:

* Containers
* Container Probes
* Labels

*Step 1:* In the _goweb-app_ custom chart that you created previously, go to _values.yaml_ in the chart directory add the following content

[source, yaml, subs="attributes,quotes,verbatim"]
----
mysql:
  mysqlDatabase: employeedb
  mysqlRootPassword: password
  persistence:
    enabled: false

redis:
  usePassword: false
  cluster:
    enabled: false
  master:
    persistence:
      enabled: false

containers:
  name: goweb-app
  image: opstreedevops/ot-go-webapp-master
  tag: "1.0-15"
----

*Step 2:* In _goweb-app/templates/deployment.yaml_, templatize the file so it reads like the following:

[source, yaml, subs="attributes,quotes,verbatim"]
----
apiVersion: apps/v1
kind: Deployment
metadata:
  name: goweb-app
  labels:
    app.kubernetes.io/name: app
    app.kubernetes.io/instance: goweb-app
    app.kubernetes.io/version: "1.16.0"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: app
      app.kubernetes.io/instance: goweb-app
  template:
    metadata:
      labels:
        app.kubernetes.io/name: app
        app.kubernetes.io/instance: goweb-app
    spec:
      containers:
        - name: {{ .Values.containers.name }}
          image: "{{ .Values.containers.image }}:{{ .Values.containers.tag }}"
          imagePullPolicy: IfNotPresent
          ports:
          - name: http
            containerPort: 8080
            protocol: TCP
          env:
          - name: DB_URL
            value: "{{ .Release.Name }}-mysql"
          - name: DB_PORT
            value: "3306"
          - name: DB_USER
            value: "root"
          - name: DB_PASSWORD
            value: "password"
          - name: REDIS_HOST
            value: "{{ .Release.Name }}-redis-headless"
          - name: REDIS_PORT
            value: "6379"
----

NOTE: Understand what we are templatizing and where it is coming from, the _values.yaml_ file

*Step 3*: Run, `lint`, `template`, `install --dry-run`, `update --dry-run` to ensure what you have so far it going to work

*Step 4:* Perform an install with whatever release name you wish, the application should run, verify by going to http://localhost[localhost^]. If this doesn't work, make sure that you uninstalled goweb-app

*Step 5:* Update _values.yaml_ to add some probes

[source, yaml, subs="attributes,quotes,verbatim"]
----
mysql:
  mysqlDatabase: employeedb
  mysqlRootPassword: password
  persistence:
    enabled: false

redis:
  usePassword: false
  cluster:
    enabled: false
  master:
    persistence:
      enabled: false

containers:
  name: goweb-app
  image: opstreedevops/ot-go-webapp-master
  tag: "1.0-15"
  livenessProbe:
    tcpSocket:
      port: 8080
  readinessProbe:
    tcpSocket:
      port: 8080
----


*Step 6:* Update _templates/deployment.yaml_ so that it looks like the following, notice where values are going to be replaced.

[source, yaml, subs="attributes,quotes,verbatim"]
----
apiVersion: apps/v1
kind: Deployment
metadata:
  name: goweb-app
  labels:
    app.kubernetes.io/name: app
    app.kubernetes.io/instance: goweb-app
    app.kubernetes.io/version: "1.16.0"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: app
      app.kubernetes.io/instance: goweb-app
  template:
    metadata:
      labels:
        app.kubernetes.io/name: app
        app.kubernetes.io/instance: goweb-app
    spec:
      containers:
        - name: {{ .Values.containers.name }}
          image: "{{ .Values.containers.image }}:{{ .Values.containers.tag }}"
          imagePullPolicy: IfNotPresent
          ports:
          - name: http
            containerPort: 8080
            protocol: TCP
          env:
          - name: DB_URL
            value: goweb-app-mysql
          - name: DB_PORT
            value: "3306"
          - name: DB_USER
            value: "root"
          - name: DB_PASSWORD
            value: "password"
          - name: REDIS_HOST
            value: "goweb-app-redis-headless"
          - name: REDIS_PORT
            value: "6379"
          livenessProbe:
            tcpSocket:
              port: {{ int .Values.containers.livenessProbe.tcpSocket.port }}
            initialDelaySeconds: 60
            periodSeconds: 5
          readinessProbe:
            tcpSocket:
              port: {{ int .Values.containers.readinessProbe.tcpSocket.port }}
            initialDelaySeconds: 60
            periodSeconds: 5
----

*Step 7:* Validate the template again using your choice of tools: `template`, `lint`, `helm upgrade --dry-run --debug`

*Step 8:* Upgrade your release again, and verify the updates, you can do so with `kubectl describe pod <pod>`

*Step 9:* Upgrade your release by overriding a value at the command line

[source, sh, subs="attributes,quotes,verbatim"]
----
$ helm upgrade <release-name> ./goweb-app --set containers.livenessProbe.tcpSocket.port=8080
----

*Step 10:* Verify results

*Step 11:* Keep the application running

image::stop.png[width="20%, height="20%", align="center"]
