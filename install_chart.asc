== Basic Operations


== Glossary of Terms

=== _Chart_ Definition

* A Helm package.
* Contains all of the resource definitions necessary to run an application, tool, or service inside of a Kubernetes cluster. 
* Think of it like the Kubernetes equivalent of a Homebrew formula, an Apt dpkg, or a Yum RPM file.

=== _Repository_ Definition


* A Repository is the place where charts can be collected and shared. 
* It’s like Perl’s CPAN archive, Fedora Package Database, or Maven Central but for Kubernetes packages.

=== _Release_ Definition

* A Release is an _instance_ of a chart running in a Kubernetes cluster.
* One chart can often be installed many times into the same cluster. 
* Each time it is installed, a new release is created. 
* For Example: 
** If you want two databases running in your cluster, you can install that chart twice. 
** Each one will have its own release, which will in turn have its own release name.

=== Glossary Review

____
Helm installs charts into Kubernetes, creating a new release for each installation. And to find new charts, you can search Helm chart repositories.
____

== Setting up a Repository

=== Setting up the Initial Repository

* The following is the official repository
* Your use of Helm will lead you to other repositories (e.g. bitnami)

[source, sh, subs="attributes,quotes,verbatim"]
----
$ helm repo add stable https://charts.helm.sh/stable
----

=== Repository Update

Running the following will refresh your local catalog of available helm charts

[source, sh, subs="attributes,quotes,verbatim"]
----
$ helm repo update
----

=== Finding Charts

* You can search for charts using:
** `helm search hub <name>` - Search for charts in the Helm Hub or an instance of Monocular
** `helm search repo <name>` - Search repositories for a keyword in all your repositories

[source, sh, subs="attributes,quotes,verbatim"]
----
$ helm search hub mysql
----

NOTE: Monocular is a web-based application that enables the search and discovery of charts from multiple Helm Chart repositories.

=== Chart Search Results

Returns for example:

[source, sh, subs="attributes,quotes,verbatim"]
----
URL                                               	CHART VERSION	APP VERSION 	DESCRIPTION
https://hub.helm.sh/charts/prometheus-com/prome...	0.7.1        	v0.11.0     	A Helm chart for prometheus mysql exporter with...
https://hub.helm.sh/charts/incubator/mysqlha      	2.0.0        	5.7.13      	MySQL cluster with a single master and zero or ...
https://hub.helm.sh/charts/presslabs/mysql-cluster	0.2.0        	1.0         	A Helm chart for easy deployment of a MySQL clu...
https://hub.helm.sh/charts/presslabs/mysql-oper...	0.4.0        	v0.4.0      	A Helm chart for mysql operator
----

=== Helm Charts

Another way to find Charts is Helm Hub: https://artifacthub.io/

image::hub-helm.png[]

=== Search for Specific Charts

[source, sh, subs="attributes,quotes,verbatim"]
----
$ helm search hadoop
----

[source, sh, subs="attributes,quotes,verbatim"]
----
$  helm search hadoop                                                                                                                             danno@DannoAir
NAME         	CHART VERSION	APP VERSION	DESCRIPTION
stable/hadoop	1.1.2        	2.9.0      	The Apache Hadoop software library is a framework that al...
stable/luigi 	2.7.5        	2.7.2      	Luigi is a Python module that helps you build complex pip...
----

Now you will only see the results that match your filter

=== Inspect your search

* You can view information about your chart including
** Maintainers
** Instructions
** Values

[source, sh, subs="attributes,quotes,verbatim"]
----
$ helm show chart <chart> <flags>
----

=== Inspect your Search Example

[source, sh, subs="attributes,quotes,verbatim"]
----
$ helm show chart stable/hadoop
----

=== Show Chart Results

[source, sh, subs="attributes,quotes,verbatim"]
----
apiVersion: v1
appVersion: 2.9.0
description: The Apache Hadoop software library is a framework that allows for the
  distributed processing of large data sets across clusters of computers using simple
  programming models.
home: https://hadoop.apache.org/
icon: http://hadoop.apache.org/images/hadoop-logo.jpg
maintainers:
- email: disla@google.com
  name: danisla
name: hadoop
sources:
- https://github.com/apache/hadoop
version: 1.1.2
----

=== View information on a chart before installing

[source, sh, subs="attributes,quotes,verbatim"]
----
$ helm get chart stable/mysql
----

=== Install Chart

To install chart, install a chart using either of the following commands

[source, sh, subs="attributes,quotes,verbatim"]
----
$ helm install <release-name> <repo>/<name>
----

[source, sh, subs="attributes,quotes,verbatim"]
----
$ helm install --generate-name <repo>/<name>
----

* Each release gets its own name
* Therefore each can be managed separately

=== Dry-Run Install Chart

To install chart with a dry run you can run either of the following

[source, sh, subs="attributes,quotes,verbatim"]
----
$ helm install --dry-run --debug <release-name> <repo>/<name>
----

[source, sh, subs="attributes,quotes,verbatim"]
----
$ helm install --dry-run --debug --generate-name <repo>/<name>
----

=== Show all releases

The following will list all releases that have been installed with information retained

[source, sh, subs="attributes,quotes,verbatim"]
----
$ helm list --all
----

To show only deployed releases

[source, sh, subs="attributes,quotes,verbatim"]
----
$ helm list
----

You can use `helm ls`

=== Determining the Status 

* Deployments need time to download containers
* Check the status with the following
* This will also show a NOTES.txt, basic set of chart instructions

[source, sh, subs="attributes,quotes,verbatim"]
----
$ helm status <release-name>
----

=== Querying Values to Override

Helm charts are extremely flexible to change configuration, the following command shows values

[source, sh, subs="attributes,quotes,verbatim"]
----
$ helm show values <chart>
----

[source, sh, subs="attributes,quotes,verbatim"]
----
$ helm show values stable/mysql
----

=== Showing Values

Values of `stable/mysql`

[source, yaml, subs="attributes,quotes,verbatim"]
----
image: "mysql"
imageTag: "5.7.30"

strategy:
  type: Recreate

busybox:
  image: "busybox"
  tag: "1.32"

testFramework:
  enabled: true
  image: "bats/bats"
  tag: "1.2.1"
  imagePullPolicy: IfNotPresent
  securityContext: {}
----

=== Setting the Values

* We can see the values that can be changed using `helm show values`
* All values can be changed!
* For Example, given the following values formatted as yaml

[source, yaml, subs="attributes,quotes,verbatim"]
----
image: "mysql"
imageTag: "5.7.30"

testFramework:
  enabled: true
  image: "bats/bats"
  tag: "1.2.1"
  imagePullPolicy: IfNotPresent
  securityContext: {}
----

* You can change the `imageTag` using `--set imageTag=5.7.31`
* You can change nested elements like the `tag` in `testFramework` using `--set testFramework.tag=1.2.2`

=== Showing the Chart

To describe the chart:

[source, sh, subs="attributes,quotes,verbatim"]
----
$ helm show chart stable/mysql
----

The results of showing the chart

[source, yaml, subs="attributes,quotes,verbatim"]
----
apiVersion: v1
appVersion: 5.7.30
description: Fast, reliable, scalable, and easy to use open-source relational database
  system.
home: https://www.mysql.com/
icon: https://www.mysql.com/common/logos/logo-mysql-170x115.png
keywords:
- mysql
- database
- sql
maintainers:
- email: o.with@sportradar.com
  name: olemarkus
- email: viglesias@google.com
  name: viglesiasce
name: mysql
sources:
- https://github.com/kubernetes/charts
- https://github.com/docker-library/mysql
version: 1.6.7
----

=== Upgrading the Chart

If you need to make a change with the values, or make another adjustment

[source, sh, subs="attributes,quotes,verbatim"]
----
$ helm upgrade <release-name> <chart> <flag>
----

For example

[source, sh, subs="attributes,quotes,verbatim"]
----
$ helm upgrade --set imageTag=5.7.30 --set testFramework.tag=1.2.2 super-dog stable/mysql
----

=== Upgrading the Chart with a File

* If you have your own _values.yaml_ file, you can include it using the `-f` flag
* Priority will be given to the right hand flag

[source, sh, subs="attributes,quotes,verbatim"]
----
$ helm upgrade -f myvalues.yaml -f override.yaml super-dog stable/mysql
----

=== Uninstall a release

[source, sh, subs="attributes,quotes,verbatim"]
----
$ helm uninstall <release-name>
----

For example:

[source, sh, subs="attributes,quotes,verbatim"]
----
$ helm uninstall super-dog
----

NOTE: Use `--dry-run` switch to see what will be uninstalled with actually uninstalling them

=== Uninstall with a History

* Using `--keep-history` will retain deployment history
* You can view previous deployments using:
** `helm list --uninstalled`
** `helm list --all`

[source, sh, subs="attributes,quotes,verbatim"]
----
$ helm uninstall --keep-history
----

=== Getting Autocomplete Help

For Bash:

[source, sh, subs="attributes,quotes,verbatim"]
----
$ helm completion bash
----

For ZSH:

[source, sh, subs="attributes,quotes,verbatim"]
----
$ helm completion zsh
----

=== Getting Help

[source, sh, subs="attributes,quotes,verbatim"]
----
$ helm get -h
----

[source, sh, subs="attributes,quotes,verbatim"]
----
$ helm ls -h
----

