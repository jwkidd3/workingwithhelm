== Lab 2: Create a Basic Chart

In this section of the lab, we'll create a helm chart for application deployment.
The chart we created here will be used throughout the rest of the lab.

* Helm chart to deploy a basic app
* Walkthrough of various Kubernetes manifests we will be creating

Helm uses a packaging format called charts. A chart is a collection of files
that describe a related set of Kubernetes resources. A single chart might be
used to deploy something simple, like a nginx pod, or something complex, 
like a full web app stack with HTTP servers, databases, caches, and so on.

If you want to download and look at the files for a published chart, 
without installing it, you can do so with `helm pull chartrepo/chartname`

Helm charts are structured like this, to get more check 
https://helm.sh/docs/topics/charts/[Charts Guide^].

[source, subs="attributes,quotes,verbatim"]
----
mychart/
  Chart.yaml
  values.yaml
  charts/
  templates/
  ...$
----

The _templates/_ directory is for template files. When Helm evaluates a chart, it will send all of the files in the _templates/_ directory through the template rendering engine. It then collects the results of those templates and sends them on to Kubernetes.

The _values.yaml_ file is also important to templates. This file contains the default values for a chart. These values may be overridden by users during `helm install` or `helm upgrade`

The _Chart.yaml_ file contains a description of the chart.

In the following lab, keep in mind that eventhough we are running a Go application, any language can be used to build a Kubernetes application.

*Step 1:* Go to a directory of your choice and type `helm create goweb-app`, notice the directory created

*Step 2:* If you do not have `tree` installed, install with `brew install tree` on MacOSX or `apt-get install tree` on Linux

*Step 3:* Type `tree goweb-app`, and view the layout. If you do not have `tree` you can use `find goweb-app`. Understand the directory structure of Helm 3.

[source, sh, subs="attributes,quotes,verbatim"]
----
$ tree goweb-app                                                                                                           danno@DannoAir
goweb-app
├── Chart.yaml
├── charts
├── templates
│   ├── NOTES.txt
│   ├── _helpers.tpl
│   ├── deployment.yaml
│   ├── hpa.yaml
│   ├── ingress.yaml
│   ├── service.yaml
│   ├── serviceaccount.yaml
│   └── tests
│       └── test-connection.yaml
└── values.yaml
----

*Step 4:* Delete the following unnecessary files for now. We will create some of these again later.

[source, sh, subs="attributes,quotes,verbatim"]
----
$ rm -rf goweb-app/templates/tests
$ rm -rf goweb-app/templates/serviceaccount.yaml
$ rm -rf goweb-app/templates/hpa.yaml
----

*Step 5:* In _goweb-app/templates/NOTES.txt_, replace the entire text of the file with "Go Web App"

*Step 6:* Remove everything from within the _goweb-app/values.yaml_ file so that it is a blank file, we will rebuild this for our needs throughout the class.

*Step 7:* Replace the following content in _goweb-app/templates/deployment.yaml_ file

[source, yaml, subs="attributes,quotes,verbatim"]
----
apiVersion: apps/v1
kind: Deployment
metadata:
  name: goweb-app
  labels:
    app.kubernetes.io/name: app
    app.kubernetes.io/instance: goweb-app
    app.kubernetes.io/version: "1.16.0"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: app
      app.kubernetes.io/instance: goweb-app
  template:
    metadata:
      labels:
        app.kubernetes.io/name: app
        app.kubernetes.io/instance: goweb-app
    spec:
      containers:
        - name: goweb-app
          image: "opstreedevops/ot-go-webapp-master:1.0-15"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
----

*Step 8:* Replace the following content in _goweb-app/templates/service.yaml_

[source, yaml, subs="attributes,quotes,verbatim"]
----
apiVersion: v1
kind: Service
metadata:
  name: goweb-app
  labels:
    app.kubernetes.io/name: app
    app.kubernetes.io/instance: goweb-app
    app.kubernetes.io/version: "1.16.0"
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: app
    app.kubernetes.io/instance: goweb-app
----

*Step 9:* Replace the following in _goweb-app/templates/ingress.yaml_

[source, yaml, subs="attributes,quotes,verbatim"]
----
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: goweb-app
  labels:
    app.kubernetes.io/name: app
    app.kubernetes.io/instance: goweb-app
    app.kubernetes.io/version: "1.16.0"
spec:
  rules:
    - http:
        paths:
          - path: /
            backend:
              serviceName: goweb-app
              servicePort: 8080
----

*Step 10:* In the terminal, ensure you are in the directory before _goweb-app_

*Step 11:* Run `helm template ./goweb-app` and view resulting manifest files that we will deploy.

NOTE: You can most certainly be _inside_ of the _goweb-app_ directory. If you are, then run `helm template .` instead.

*Step 12:* Run `helm lint ./goweb-app` and ensure there are no major issues, this utility is great for checking problems.

*Step 13:* Run `helm install --dry-run --debug goweb-app ./goweb-app`, this will talk to your Kubernetes instance and report issues if you were to actually deploy.

WARNING: Notice that we are hard-coding our release-name with `goweb-app`. This is necessary for now, when we templatize in Lab 4, then we can use whatever release-name we would like.

*Step 14:* Before we proceed, we need to install an ingress-controller so we can access our application, we can use a helm chart to do that too!

[source, sh, subs="attributes,quotes,verbatim"]
----
$ helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
$ helm repo update
$ helm install ingress-nginx ingress-nginx/ingress-nginx
----

*Step 15:* Run either `helm install goweb-app ./goweb-app`

*Step 16:* Verify the install using the commands you learned in the last lab, like `helm ls` or `helm get`. 

NOTE: There isn't a web presence yet, because we need a database and some other dependencies in order to get this to work properly

image::stop.png[width="20%, height="20%", align="center"]
