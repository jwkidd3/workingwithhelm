== Testing Helm

=== Unit Testing Helm

https://github.com/quintush/helm-unittest

* Write test file in pure YAML
* Render locally with no need of tiller
* Create nothing on your cluster
* Define values and release options
* Snapshot testing

=== Install as Plugin

[source, sh, subs="attributes,quotes,verbatim"]
----
% helm plugin install https://github.com/quintush/helm-unittest
----

NOTE: `quintush/helm-unittest` is the latest plugin that works with Helm Version 3

=== Building a Test

* Create a `tests` folder
* Add `tests` directory to your chart
* Add file, for example, to _$YOUR_CHART/tests/deployment_test.yaml_

=== Example Test

[source, yaml, subs="attributes,quotes,verbatim"]
----
suite: test deployment
templates:
  - deployment.yaml
tests:
  - it: should work
    set:
      image.tag: latest
    asserts:
      - isKind:
          of: Deployment
      - matchRegex:
          path: metadata.name
          pattern: -my-chart$
      - equal:
          path: spec.template.spec.containers[0].image
          value: nginx:latest
----

=== Running the Test

To run the tests

[source, sh, subs="attributes,quotes,verbatim"]
----
% helm unittest $YOUR_CHART
----

If you wish to use a different folder, you can use `-f`, or `--file`

[source, sh, subs="attributes"]
----
% helm unittest -f 'my-tests/{star}.yaml' -f 'more-tests/{star}.yaml' my-chart
----

=== Snapshot Testing

* You can take a snapshot of the entire manifest or portions with a snapshot
* This avoids the need assert every single element
* This will match an element against the snapshot taken the previous time
* Snapshots are located in the `__snapshot__/*_test.yaml.snap_` directory
* Run `-u` or `--update-snapshot` to update the snapshot

=== Snapshot Example Test

[source, yaml, subs="attributes,quotes,verbatim"]
----
templates:
  - deployment.yaml
tests:
  - it: pod spec should match snapshot
    asserts:
      - matchSnapshot:
          path: spec.template.spec
  # or you can snapshot the whole manifest
  - it: manifest should match snapshot
    asserts:
      - matchSnapshot: {}
----

=== Test Suite Detail

[source, yaml, subs="attributes,quotes,verbatim"]
----
suite: test deploy and service
templates:
  - deployment.yaml
  - service.yaml
tests:
  - it: should test something
    ...
----

* `suite`: _string, optional_. The suite name to show on test result output.
* `templates`: _array of string, recommended_. The template files scope to test in this suite, only the ones specified here is rendered during testing. If omitted, all template files are rendered. File suffixed with .tpl is added automatically, you don't need to add them again.
* `tests`: _array of test job, required_. Where you define your test jobs to run, check Test Job.

=== Test Job

The test job is the base unit of testing. 
Your chart is rendered each time a test job run, and validated with assertions defined in the test.
You can setup your values used to render the chart in the test job with external values files or directly in the test job definition.

=== Test Details

[source, yaml, subs="attributes,quotes,verbatim"]
----
tests:
  - it: should pass
    values:
      - ./values/staging.yaml
    set:
      image.pullPolicy: Always
      resources:
        limits:
          memory: 128Mi
    release:
      name: my-release
      namespace:
      revision: 9
      isUpgrade: true
    asserts:
      - equal:
          path: metadata.name
          value: my-deploy
----

* `it` - Define the name of the test with TDD style or any message you like.
* `values` - The values files used to renders the chart, like _Values.yaml_
* `set` - Set the values directly in suite file, analogous to `--set`

=== Various Assertions

* Equality: `equal`, `notEqual`
* Regex: `matchRegex`, `notRegexMatch`
* Contains: `contains`, `notContains`
* Null: `isNull`, `isNotNull`
* Empty: `isEmpty`, `isNotEmpty`
* APIVersion: `apiVersion` of Manifest
* Number of Documents: `hasDocuments` Expected number of documents rendered
* Match Snapshot: Path that should not change from one run to another

=== Integration Testing

* A test in a helm chart lives under the `templates/tests` directory
* These are different than a unit test
* A job or pod definition that specifies a container with a given command to run.
* Container should run successfully
* Must have annotation: `helm.sh/hook: test`

=== Example Tests

* Validate that your configuration from the _values.yaml_ file was properly injected.
* Make sure your username and password work correctly
* Make sure an incorrect username and password does not work
* Assert that your services are up and correctly load balancing

=== Maria DB Example Helm Test

https://helm.sh/docs/topics/chart_tests/

=== Run an Integration Test on the Command Line

[source, sh, subs="attributes,quotes,verbatim"]
----
% helm test [RELEASE] [flags]
----

