== YAML Primer

Agenda:

* Understand Quickly YAML Specifications

Source: https://v2.helm.sh/docs/chart_template_guide/#yaml-techniques

=== YAML List

[source, yaml, subs="attributes,quotes,verbatim"]
----
sequence:
  - one
  - two
  - three
----

=== YAML Map

[source, yaml, subs="attributes,quotes,verbatim"]
----
map:
  one: 1
  two: 2
  three: 3
----

=== Integer Scalars

If an integer or float is an unquoted bare word, it is typically treated as a numeric type

[source, yaml, subs="attributes,quotes,verbatim"]
----
count: 1
size: 2.34
----

If they are quoted, they are treated as strings:

[source, yaml, subs="attributes,quotes,verbatim"]
----
count: "1" # <-- string, not int
size: '2.34' # <-- string, not float
----

=== Boolean Scalars

[source, yaml, subs="attributes,quotes,verbatim"]
----
isGood: true   # bool
answer: "true" # string
----

=== `null`

[source, yaml, subs="attributes,quotes,verbatim"]
----
isAvailable: null
----


=== Coercing YAML Values

* You can coerce YAML values using `!!`
* Below:
** `!!str` tells the parser that age is a string, even if it looks like an `int`.
** `port` is treated as an `int`, even though it is quoted.

[source, yaml, subs="attributes,quotes,verbatim"]
----
coffee: "yes, please"
age: !!str 21
port: !!int "80"
----

=== YAML Strings

Three inline ways to declare a string
[source, yaml, subs="attributes,quotes,verbatim"]
----
way1: bare words
way2: "double-quoted strings"
way3: 'single-quoted strings'
----

* Bare words are unquoted, and are not escaped. For this reason, you have to be careful what characters you use.
* Double-quoted strings can have specific characters escaped with `\`. 
** For example `"\"Hello\", she said"`. 
** You can escape line breaks with `\n`.
* Single-quoted strings are “literal” strings, and do not use the `\` to escape characters.
** The only escape sequence is `''`, which is decoded as a single `'`.

=== Multiline Strings

* Multiline strings can be declared using `|`
* The following is equivalent to: `Latte\nCappuccino\nEspresso\n`

[source, yaml, subs="attributes,quotes,verbatim"]
----
coffee: |
  Latte
  Cappuccino
  Espresso
----

NOTE: The first line has be correctly indented

=== Multiline with Trimming

* The previous slide will render a multiline string with an additional newline
* To trim the extra newline, use a dash `-`
* The following is equivalent to: `Latte\nCappuccino\nEspresso`

[source, yaml, subs="attributes,quotes,verbatim"]
----
coffee: |-
  Latte
  Cappuccino
  Espresso
----

=== Indentation is Preserved

* Indentation inside of a text block is preserved, this includes line breaks
* In the following, `coffee` is `Latte\n 12 oz\n 16 oz\nCappuccino\nEspresso`

[source, yaml, subs="attributes,quotes,verbatim"]
----
coffee: |-
  Latte
    12 oz
    16 oz
  Cappuccino
  Espresso
----

=== Maintaining all Trailing Whitespaces

* Using `|+` maintains all trailing whitespace
* The following evaluates to: `Latte\nCappuccino\nEspresso\n\n\n`

[source, yaml, subs="attributes,quotes,verbatim"]
----
coffee: |+
  Latte
  Cappuccino
  Espresso


another: value
----

=== Folded Multiline Strings

* Sometimes you want to represent a string in your YAML with multiple lines, but want it to be treated as one long line.
* This is called “folding”. 
* To declare a folded block, use `>` instead of `|`
* The following will render `coffee` as `Latte Cappuccino Espresso\n`

[source, yaml, subs="attributes,quotes,verbatim"]
----
coffee: >
  Latte
  Cappuccino
  Espresso
----

=== Folding and Trimming

* Given the previous slide, it still maintains the last `\n`
* We can then use `>-` to fold and trim all the newlines
* The following produces for `coffee`: `Latte\n 12 oz\n 16 oz\nCappuccino Espresso`

[source, yaml, subs="attributes,quotes,verbatim"]
----
coffee: >-
  Latte
    12 oz
    16 oz
  Cappuccino
  Espresso
----

=== Embedding Multiple Documents

* You can embed multiple yaml files in a single file
* This is done by prefixing: `___`, and ending with `...`
* In many cases they can be omitted since it would be up to the parser

[source, yaml, subs="attributes,quotes,verbatim"]
----
---
document:1
...
---
document: 2
...
----

=== YAML Anchors

* YAML spec provides a way to store a reference to a value and later refer to that value by reference. 
* YAML refers to this as “anchoring”
* Use `&` as the reference
* Use `*` as the pointer

[source, yaml, subs="attributes,quotes,verbatim"]
----
coffee: "yes, please"
favorite: &favoriteCoffee "Cappucino"
coffees:
  - Latte
  - *favoriteCoffee
  - Espresso
----

WARNING: References is expanded and then discarded. The anchors in Helm and K8s will be lost
