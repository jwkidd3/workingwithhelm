== Templates

=== Creating `chart`

[source, sh, subs="attributes,quotes,verbatim"]
----
% helm create chart
----

Creates the following directory

[source, subs="attributes,quotes,verbatim"]
----
mychart/
  Chart.yaml
  values.yaml
  charts/
  templates/
  ...
----

=== About Templates

* `templates` directory contain the template files
* All the files in the `templates` directory will go through the template rendering engine
* It collects the results and sends it through Kubernetes

=== `values.yaml`

* Contains default values for charts
* Then can be overriden by 
** `helm install`
** `helm upgrade`

=== `Chart.yaml`

* Contains a description of the chart
* It can be accessed from the template
* Charts can create other charts called _subcharts_

=== Inside `templates`

* `NOTES.txt` - "Help text" - Displayed when they run `helm install`
* `deployment.yaml` - A basic manifest for creating a Kubernetes deployment
* `service.yaml` - A basic manifest for creating a service endpoint for your deployment
* `_helpers.tpl`: A place to put template helpers that you can re-use throughout the chart

=== Example `template`

[source, yaml, subs="attributes,quotes,verbatim"]
----
apiVersion: v1
kind: ConfigMap
metadata:
  name: mychart-configmap
data:
  myvalue: "Hello World"
----

NOTE: Convention, use `.yaml` extension for yaml files, and `.tpl` for helpers

=== Viewing the template

We can install it using `helm install mychart`

[source, sh, subs="attributes,quotes,verbatim"]
----
% helm install --generate-name ./mychart

NAME: full-coral
LAST DEPLOYED: Tue Nov  1 17:36:01 2016
NAMESPACE: default
STATUS: DEPLOYED

RESOURCES:
==> v1/ConfigMap
NAME                DATA      AGE
mychart-configmap   1         1m
----

NOTE: `full-coral` is the release name, it is either manually created or chosen randomly

=== Retrieving the Release

[source, sh, subs="attributes,quotes,verbatim"]
----
% helm get manifest full-coral

---
# Source: mychart/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: mychart-configmap
data:
  myvalue: "Hello World"
----

=== Setting a Release Name

* Best Practice is the replace the `Name:` field
* We can create a Template call of the name
* The dots are called _namespace objects_

[source, yaml, subs="attributes,quotes,verbatim"]
----
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-configmap
data:
  myvalue: "Hello World"
----

=== Running the Template

* Installing the chart

[source, sh, subs="attributes,quotes,verbatim"]
----
% helm install ./mychart
----

* Getting the Manifest

[source, sh, subs="attributes,quotes,verbatim"]
----
% helm get manifest ./mychart
----

=== Debugging the Content

[source, sh, subs="attributes,quotes,verbatim"]
----
% helm install ./mychart --debug --dry-run
----

NOTE: `--dry-run` will make it easier to test your code

=== Objects

* Passed into the template engine
* Can be created within the template engine
* Can simple with one value
* Contain other objects and functions

=== `Release` Object

* `Release`: This object describes the release itself. It has several objects inside of it:
* `Release.Name`: The release name
* `Release.Time`: The time of the release
* `Release.Namespace`: The namespace to be released into (if the manifest doesnâ€™t override)
* `Release.Service`: The name of the releasing service (always `Helm`).
* `Release.Revision`: The revision number of this release. It begins at 1 and is incremented for each helm upgrade.
* `Release.IsUpgrade`: This is set to true if the current operation is an upgrade or rollback.
* `Release.IsInstall`: This is set to true if the current operation is an install.

=== `Values` Object

* Values passed into the template from
** The _values.yaml_ file
** From user-supplied files. 
** By default, `Values` is empty.

=== `Chart` Object

* The contents of the _Chart.yaml_ file
* Any data in Chart.yaml will be accessible here
* e.g. `{{.Chart.Name}}-{{.Chart.Version}}`

=== `Files` Object

* This provides access to all non-special files in a chart.
* While you cannot use it to access templates, you can use it to access other files in the chart.
* `Files.Get` is a function for getting a file by name (.Files.Get config.ini)
* `Files.GetBytes` is a function for getting the contents of a file as an array of bytes instead of as a string.

=== `Capabilities`

* This provides information about what capabilities the Kubernetes cluster supports
* `Capabilities.APIVersions`- Set of versions.
* `Capabilities.APIVersions.Has $version` - 
** Indicates whether a version (e.g., batch/v1) or resource (e.g., apps/v1/Deployment) is available on the cluster.
* `Capabilities.KubeVersion`
** Provides a way to look up the Kubernetes version.
** It has the following values: `Major`, `Minor`, `GitVersion`, `GitCommit`, `GitTreeState`, `BuildDate`, `GoVersion`, `Compiler`, and `Platform`.

=== `Template`

Contains information about the current template that is being executed

* `Name` - A namespaced filepath to the current template (e.g. `mychart/templates/mytemplate.yaml`)
* `BasePath` - The namespaced path to the templates directory of the current chart (e.g. `mychart/templates`)

=== Convention Spelling

* Choose lower case for `Values` objects
* Reserve upper case for built-in objects

=== Values Files

Values comes from the following in descending order:

* The _values.yaml_ file in the chart
* If this is a subchart, the _values.yaml_ file of a parent chart
* A values file is passed into helm install or helm upgrade with the `-f` flag (`helm install -f myvals.yaml ./mychart`)
* Individual parameters passed with `--set` (such as `helm install --set foo=bar ./mychart`)

=== Example of getting an attribute

[source, yaml, subs="attributes,quotes,verbatim"]
----
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-configmap
data:
  myvalue: "Hello World"
  drink: {{ .Values.favoriteDrink }}
----

=== Rendering the attribute

[source, yaml, subs="attributes,quotes,verbatim"]
----
# Source: mychart/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: geared-marsupi-configmap
data:
  myvalue: "Hello World"
  drink: coffee
----

=== Overriding the Attribute

[source, sh, subs="attributes,quotes,verbatim"]
----
% helm install --dry-run --debug --set favoriteDrink=slurm ./mychart
----

Renders:

[source, yaml, subs="attributes,quotes,verbatim"]
----
apiVersion: v1
kind: ConfigMap
metadata:
  name: solid-vulture-configmap
data:
  myvalue: "Hello World"
  drink: slurm
----

=== Multi-level Values.yaml

[source, yaml, subs="attributes,quotes,verbatim"]
----
favorite:
  drink: coffee
  food: pizza
----

Using the template:

[source, yaml, subs="attributes,quotes,verbatim"]
----
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-configmap
data:
  myvalue: "Hello World"
  drink: {{ .Values.favorite.drink }}
  food: {{ .Values.favorite.food }}
----

NOTE: Keep trees shallow in `values.yaml` as much as possible

=== Deleting a default key

To delete a key, override the value with `null`

[source, yaml, subs="attributes,quotes,verbatim"]
----
livenessProbe:
  httpGet:
    path: /user/login
    port: http
----

[source, sh, subs="attributes,quotes,verbatim"]
----
% helm install ./chart --set livenessProbe.httpGet=null
----

