== Create Basic Chart

Agenda:

* Creating a chart
* Understanding templates
* Performing Dry Runs
* Understanding Values

=== Creating a Chart

[source, sh, subs="attributes,quotes,verbatim"]
----
% helm create mychart
----

This will create:

[source, sh, subs="attributes,quotes,verbatim"]
----
.
└── mychart
    ├── Chart.yaml
    ├── charts
    ├── templates
    │   ├── NOTES.txt
    │   ├── _helpers.tpl
    │   ├── deployment.yaml
    │   ├── ingress.yaml
    │   ├── service.yaml
    │   ├── serviceaccount.yaml
    │   └── tests
    │       └── test-connection.yaml
    └── values.yaml
----

=== `Chart.yaml`

A default YAML file containing information about the chart

[source, yaml, subs="attributes,quotes,verbatim"]
----
apiVersion: v1
appVersion: "1.0"
description: A Helm chart for Kubernetes
name: mychart
version: 0.1.0
----

|===
| apiVersion | Chart API version
| appVersion | Version that app contains
| description | Single sentence description
| name | Name of the project
| version | SemVer 2 version
|===

=== `charts` Directory

The `charts` directory is a directory containing any charts upon which this chart depends

=== `templates` Directory

A directory of templates that, when combined with values, will generate valid Kubernetes manifest files

  * `_helpers.tpl` - helper templates
  * Kubernetes files 
  * tests - unit

=== Additional Fields 

[cols="1m, 2"]
|===
| kubeVersion | SemverRange of compatible K8s versions
| keywords | List of keywords
| home | Project's Home Page
| sources | List of URLs of source code
| maintainers | List of maintainers (see maintainer object)
|===

=== Additional Fields Continued

[cols="1m, 2"]
|===
| engine | Name of the template engine; default: Go Template Engine
| icon | SVG or PNG representing the chart
| deprecated | Whether this chart is deprecated
| tillerVersion | Version of Tiller (Semver)
|===

=== Maintainers:

The maintainers, previous slide looks like the following

[cols="1m, 2"]
|===
| name | Maintainer's name
| email | Maintainer's email
| url | Maintainer's url
|===

=== SemVer Standard

* https://semver.org/
* Given a version number MAJOR.MINOR.PATCH, increment the:
** *MAJOR* version when you make incompatible API changes,
** *MINOR* version when you add functionality in a backwards compatible manner, and
** *PATCH* version when you make backwards compatible bug fixes.
** Additional labels for pre-release and build metadata are available as extensions to the **MAJOR.MINOR.PATCH** format.
* There are additional rules, see website for details

=== Charts and Versioning

* Versions must follow SemVer2 Versioning
* Example the tar ball that represents nginx, given the name `nginx` and version `1.2.3`

[source, subs="attributes,quotes,verbatim"]
----
nginx-1.2.3.tgz
----

* Version field is in the _chart.yml_ is used by various tools. All version numbers _must match_.

=== `appVersion`

* App version is for users' use, purely informational
* Doesn't follow SemVer rules

=== Deprecating Charts

* The optional `deprecated` field in _Chart.yaml_ can be used to mark a chart as deprecated
* If the latest version of a chart in the repository is marked as deprecated, then the chart as a whole is considered to be deprecated.
* The chart name can later be reused by publishing a newer version that is not marked as `deprecated`

=== _LICENSE_, _README, _Notes.txt_

* _LICENSE_ is the licensing used in Helm
* _README_ is Markdown information on how to use the chart
* _template/NOTES.txt_ used to display the status of the release when using `helm package` or `helm status`

=== _.helmignore_ File

* Used to specify files you don’t want to include in your helm chart.
* If the file exists, the `helm package` (used to package for distribution) command will ignore all the files that match the pattern specified in the _.helmignore_ file while packaging your application.
* This can help in avoiding unnecessary or sensitive files or directories from being added in your helm chart.
* The _.helmignore_ file supports Unix shell glob matching, relative path matching, and negation (prefixed with !). 
* Only one pattern per line is considered.

[source, property, subs="attributes"]
----
# comment
.git
{star}/temp{star}
{star}/{star}/temp{star}
temp?
----

=== Debugging Templates

* While things may look well on the client
* When it is sent to the Kubernetes API, it may reject
* To help debug, you can use the following:
** `helm lint` is your go-to tool for verifying that your chart follows best practices
** `helm install --dry-run --debug` render your templates and eyeball the results
** `helm get manifest` see what templates have already been installed on the server
